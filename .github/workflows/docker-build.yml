name: Build and Push Keycloak Skill-Wanderer Image

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'themes/skill-wanderer-theme/**'
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'themes/skill-wanderer-theme/**'
      - 'Dockerfile'
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/keycloak-skill-wanderer

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.push.outputs.digest }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Keycloak with Skill-Wanderer Theme
            org.opencontainers.image.description=Custom Keycloak image with Skill-Wanderer branding and theme
            org.opencontainers.image.vendor=Skill-Wanderer
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-docs:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update README with latest image tag
        run: |
          # Get the latest tag from the build job
          LATEST_TAG="latest"
          if [ "${{ github.event_name }}" == "release" ]; then
            LATEST_TAG="${{ github.event.release.tag_name }}"
          fi
          
          # Update README with the new image reference
          sed -i "s|ghcr.io/${{ github.repository }}/keycloak-skill-wanderer:.*|ghcr.io/${{ github.repository }}/keycloak-skill-wanderer:${LATEST_TAG}|g" README.md
          
          # Check if there are changes
          if git diff --quiet HEAD README.md; then
            echo "No changes to commit"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "Update image tag to ${LATEST_TAG} [skip ci]"
            git push
          fi

  notify:
    needs: [build-and-push, deploy-docs]
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'failure')

    steps:
      - name: Notify success
        if: needs.build-and-push.result == 'success'
        run: |
          echo "‚úÖ Successfully built and pushed Keycloak Skill-Wanderer image!"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è Build completed successfully"

      - name: Notify failure
        if: needs.build-and-push.result == 'failure'
        run: |
          echo "‚ùå Failed to build and push Keycloak Skill-Wanderer image"
          exit 1
